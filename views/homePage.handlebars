<main class="has-foldables">
    <script>
		function setSlide(slide, open) {
			slide.classList.add(open ? "opened" : "closed");
			slide.classList.remove(open ? "closed" : "opened");
		}

		var onLeftSlide = true;
		function changeSlide() {
			onLeftSlide = !onLeftSlide;
			var leftSlide = document.getElementById("left-slide");
			var rightSlide = document.getElementById("right-slide");
			var sliderBar = document.getElementById("slider-bar");
			if (onLeftSlide) {
				setSlide(leftSlide, true);
				setSlide(rightSlide, false);
				sliderBar.classList.remove("left");
			} else {
				setSlide(rightSlide, true);
				setSlide(leftSlide, false);
				sliderBar.classList.add("left");
			}
		}

        window.addEventListener("DOMContentLoaded", function() {
            var hyperlanes = JSON.parse(decodeURIComponent("{{{encoded_hyperlane_details}}}"));
            var systems = JSON.parse(decodeURIComponent("{{{encoded_systems}}}"));
            var empires = JSON.parse(decodeURIComponent("{{{encoded_empires}}}"));

            // Create array that pairs empires with systems array to be populated with owned systems later
            var empireRegions = [];
            for (var i = 0; i < empires.length; i++) {
                empireRegions.push({
                    empire: empires[i],
                    systems: []
                });
            }

            // Sort systems by empire ownership
            for (var i = 0; i < systems.length; i++) {
                if (systems[i].empireID != null) {
                    var empireRegion = empireRegions.find(e => e.empire.empireID == systems[i].empireID);
                    if (empireRegion != null) {
                        empireRegion.systems.push(systems[i]);
                    }
                }
            }

            // Prepare highlight context for galaxy view
            var highlightContext = [];
            for (var i = 0; i < empireRegions.length; i++) {
                highlightContext.push(makeRegionHighlightContext(empireRegions[i].systems, empireRegions[i].empire.primaryColor));
            }

            drawGalaxyView(hyperlanes, systems, highlightContext);
		});
	</script>
	<div class="page-container has-right-slider">
        <div id="left-slide" class="left-slider opened">
			<div id="pages-slide" class="slide-inner">
				<a href="/empires" class="quadrant empires-quadrant">
					<div class="quadrant-text">Empires</div>
				</a>
				<a href="/systems" class="quadrant systems-quadrant">
					<div class="quadrant-text">Systems</div>
				</a>
				<a href="/resources" class="quadrant resources-quadrant">
					<div class="quadrant-text">Resources</div>
				</a>
				<a href="/bodies" class="quadrant bodies-quadrant">
					<div class="quadrant-text">Bodies</div>
				</a>
				<a href="/hyperlanes" class="quadrant hyperlanes-quadrant">
					<div class="quadrant-text">Hyperlanes</div>
				</a>
			</div>
        </div>
		<div id="slider-bar" class="slider-bar" onclick="changeSlide()">
			<span class="slider-arrow">&#8250;</span>
		</div>
		<div id="right-slide" class="right-slider closed">
			<div id="galaxy-slide" class="slide-inner">
				{{> galaxyView extraClass="big-view"}}
			</div>
		</div>
    </div>
</main>
